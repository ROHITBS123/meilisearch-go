# This code-samples file is used by the MeiliSearch documentation
# Every example written here will be automatically fetched by
# the documentation on build
# You can read more on https://github.com/meilisearch/documentation/tree/master/.vuepress/code-samples
---
get_one_index_1: |-
  client.GetIndex("movies")
list_all_indexes_1: |-
  client.GetAllIndexes()
create_an_index_1: |-
  client.CreateIndex(&meilisearch.IndexConfig{
    Uid: "movies",
    PrimaryKey: "movie_id",
  })
update_an_index_1: |-
  client.Index("movies").UpdateIndex("movie_review_id")
delete_an_index_1: |-
  client.DeleteIndex("movies")
  // OR
  client.Index("movies").Delete()
get_one_document_1: |-
  var a interface{}
  client.Index("movies").GetDocument("25684", &a)
get_documents_1: |-
  var a []interface{}
  client.Index("movies").GetDocuments(&meilisearch.DocumentsRequest{
    Limit: 2,
  }, &a)
add_or_replace_documents_1: |-
  documents := []map[string]interface{}{
    {
      "id":           287947,
      "title":        "Shazam",
      "poster":       "https://image.tmdb.org/t/p/w1280/xnopI5Xtky18MPhK40cZAGAOVeV.jpg",
      "overview":     "A boy is given the ability to become an adult superhero in times of need with a single magic word.",
      "release_date": "2019-03-23",
    },
  }
  client.Index("movies").AddDocument(documents)
add_or_update_documents_1: |-
  documents := []map[string]interface{}{
    {
      "id":     287947,
      "title":  "Shazam ⚡️",
      "genres": "comedy",
    },
  }
  client.Index("movies").UpdateDocuments(documents)
delete_all_documents_1: |-
  client.Index("movies").DeleteAllDocuments()
delete_one_document_1: |-
  client.Index("movies").DeleteDocument("25684")
delete_documents_1: |-
  client.Index("movies").DeleteDocuments([]string{
    "23488",
    "153738",
    "437035",
    "363869",
  })
search_post_1: |-
  client.Index("movies").Search("american ninja", &meilisearch.SearchRequest{})
get_update_1: |-
  client.Index("movies").GetUpdateStatus(1)
get_all_updates_1: |-
  client.Index("movies").GetAllUpdateStatus()
get_keys_1: |-
  client.GetKeys()
get_settings_1: |-
  client.Index("movies").GetSettings()
update_settings_1: |-
  distinctAttribute := "movie_id"
  settings := meilisearch.Settings{
    RankingRules: []string{
      "words",
      "typo",
      "proximity",
      "attribute",
      "exactness",
      "desc(release_date)",
      "desc(rank)",
    },
    DistinctAttribute: &distinctAttribute,
    SearchableAttributes: []string{
      "title",
      "description",
      "genre",
    },
    DisplayedAttributes: []string{
      "title",
      "description",
      "genre",
      "release_date",
    },
    StopWords: []string{
      "the",
      "a",
      "an",
    },
    Synonyms: map[string][]string{
      "wolverine": []string{"xmen", "logan"},
      "logan":     []string{"wolverine"},
    },
  }
  client.Index("movies").UpdateSettings(&settings)
reset_settings_1: |-
  client.Index("movies").ResetSettings()
get_synonyms_1: |-
  client.Index("movies").GetSynonyms()
update_synonyms_1: |-
  synonyms := map[string][]string{
    "wolverine": []string{"xmen", "logan"},
    "logan":     []string{"wolverine", "xmen"},
    "wow":       []string{"world of warcraft"},
  }
  client.Index("movies").UpdateSynonyms(&synonyms)
reset_synonyms_1: |-
  client.Index("movies").ResetSynonyms()
get_stop_words_1: |-
  client.Index("movies").GetStopWords()
update_stop_words_1: |-
  stopWords := []string{"of", "the", "to"}
  client.Index("movies").UpdateStopWords(&stopWords)
reset_stop_words_1: |-
  client.Index("movies").ResetStopWords()
get_ranking_rules_1: |-
  client.Index("movies").GetRankingRules()
update_ranking_rules_1: |-
  rankingRules := []string{
    "words",
    "typo",
    "proximity",
    "attribute",
    "exactness",
    "asc(release_date)",
    "desc(rank)",
  }
  client.Index("movies").UpdateRankingRules(&rankingRules)
reset_ranking_rules_1: |-
  client.Index("movies").ResetRankingRules()
get_distinct_attribute_1: |-
  client.Index("movies").GetDistinctAttribute()
update_distinct_attribute_1: |-
  client.Index("movies").UpdateDistinctAttribute("movie_id")
reset_distinct_attribute_1: |-
  client.Index("movies").ResetDistinctAttribute()
get_filterable_attributes_1: |-
  client.Index("movies").GetFilterableAttributes()
update_filterable_attributes_1: |-
  filterableAttributes := []string{
    "genres",
    "director",
  }
  client.Index("movies").UpdateFilterableAttributes(&filterableAttributes)
reset_filterable_attributes_1: |-
  client.Index("movies").ResetFilterableAttributes()
get_searchable_attributes_1: |-
  client.Index("movies").GetSearchableAttributes()
update_searchable_attributes_1: |-
  searchableAttributes := []string{
    "title",
    "description",
    "genre",
  }
  client.Index("movies").UpdateSearchableAttributes(&searchableAttributes)
reset_searchable_attributes_1: |-
  client.Index("movies").ResetSearchableAttributes()
get_displayed_attributes_1: |-
  client.Index("movies").GetDisplayedAttributes()
update_displayed_attributes_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "genre",
    "release_date",
  }
  client.Index("movies").UpdateDisplayedAttributes(&displayedAttributes)
reset_displayed_attributes_1: |-
  client.Index("movies").ResetDisplayedAttributes()
get_index_stats_1: |-
  client.Index("movies").GetStats()
get_indexes_stats_1: |-
  client.GetAllStats()
get_health_1: |-
  client.Health()
get_version_1: |-
  client.GetVersion()
distinct_attribute_guide_1: |-
  client.Index("jackets").UpdateDistinctAttribute("product_id")
field_properties_guide_searchable_1: |-
  searchableAttributes := []string{
    "title",
    "description",
    "genre",
  }
  client.Index("movies").UpdateSearchableAttributes(&searchableAttributes)
field_properties_guide_displayed_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "genre",
    "release_date",
  }
  client.Index("movies").UpdateDisplayedAttributes(&displayedAttributes)
filtering_guide_1: |-
  resp, err := client.Index("movies").Search("Avengers", &meilisearch.SearchRequest{
    Filter: "release_date > \"795484800\"",
  })
filtering_guide_2: |-
  resp, err := client.Index("movies").Search("Batman", &meilisearch.SearchRequest{
    Filter: "release_date > 795484800 AND (director = \"Tim Burton\" OR director = \"Christopher Nolan\")",
  })
filtering_guide_3: |-
  resp, err := client.Index("movies").Search("horror", &meilisearch.SearchRequest{
    Filter: "director = \"Jordan Peele\"",
  })
filtering_guide_4: |-
  resp, err := client.Index("movies").Search("Planet of the Apes", &meilisearch.SearchRequest{
    Filter: "rating >= 3 AND (NOT director = \"Tim Burton\"",
  })
search_parameter_guide_query_1: |-
  resp, err := client.Index("movies").Search("shifu", &meilisearch.SearchRequest{})
search_parameter_guide_offset_1: |-
  resp, err := client.Index("movies").Search("shifu", &meilisearch.SearchRequest{
    Offset: 1,
  })
search_parameter_guide_limit_1: |-
  resp, err := client.Index("movies").Search("shifu", &meilisearch.SearchRequest{
    Limit: 2,
  })
search_parameter_guide_retrieve_1: |-
  resp, err := client.Index("movies").Search("shifu", &meilisearch.SearchRequest{
    AttributesToRetrieve: []string{"overview", "title"},
  })
search_parameter_guide_crop_1: |-
  resp, err := client.Index("movies").Search("shifu" &meilisearch.SearchRequest{
    AttributesToCrop: []string{"overview"},
    CropLength:       10,
  })
search_parameter_guide_highlight_1: |-
  resp, err := client.Index("movies").Search("winter feast", &meilisearch.SearchRequest{
    AttributesToHighlight: []string{"overview"},
  })
search_parameter_guide_filter_1: |-
  resp, err := client.Index("movies").Search("n", &meilisearch.SearchRequest{
    Filter: "title = Nightshift",
  })
search_parameter_guide_filter_2: |-
  resp, err := client.Index("movies").Search("n", &meilisearch.SearchRequest{
    Filter: "title = \"Kung Fu Panda\"",
  })
search_parameter_guide_matches_1: |-
  resp, err := client.Index("movies").Search("winter feast", &meilisearch.SearchRequest{
    Matches:               true,
  })
settings_guide_synonyms_1: |-
  synonyms := map[string][]string{
    "sweater": []string{"jumper"},
    "jumper":  []string{"sweater"},
  }
  client.Index("tops").UpdateSynonyms(&synonyms)
settings_guide_stop_words_1: |-
  stopWords := []string{"the", "a", "an"}
  client.Index("movies").UpdateStopWords(&stopWords)
settings_guide_ranking_rules_1: |-
  rankingRules := []string{
    "words",
    "typo",
    "proximity",
    "attribute",
    "exactness",
    "asc(release_date)",
    "desc(rank)",
  }
  client.Index("movies").UpdateRankingRules(&rankingRules)
settings_guide_distinct_1: |-
  client.Index("jackets").UpdateDistinctAttribute("product_id")
settings_guide_searchable_1: |-
  searchableAttributes := []string{
    "title",
    "description",
    "genre",
  }
  client.Index("movies").UpdateSearchableAttributes(&searchableAttributes)
settings_guide_displayed_1: |-
  displayedAttributes := []string{
    "title",
    "description",
    "genre",
    "release_date",
  }
  client.Index("movies").UpdateDisplayedAttributes(&displayedAttributes)
add_movies_json_1: |-
  import (
    "encoding/json"
    "io/ioutil"
  )

  file, _ := ioutil.ReadFile("movies.json")

  var movies interface{}
  json.Unmarshal([]byte(file), &movies)

  client.Index("movies").AddDocuments(&movies)
documents_guide_add_movie_1: |-
  documents := []map[string]interface{}{
    {
      "movie_id": "123sq178",
      "title":    "Amelie Poulain",
    },
  }
  client.Index("movies").AddDocuments(documents)
search_guide_1: |-
  resp, err := client.Index("movies").Search("shifu", &meilisearch.SearchRequest{
    Limit:  5,
    Offset: 10,
  })
search_guide_2: |-
  resp, err := client.Index("movies").Search("Avengers", &meilisearch.SearchRequest{
    Filter: "release_date > \"795484800\"",
  })
getting_started_add_documents_md: |-
  ```bash
  go get -u github.com/meilisearch/meilisearch-go
  ```

  ```go
  package main

  import (
    "os"
    "encoding/json"
    "io/ioutil"

    "github.com/meilisearch/meilisearch-go"
  )

  func main() {
    client := meilisearch.NewClient(meilisearch.ClientConfig{
      Host: "http://127.0.0.1:7700",
    })

    jsonFile, _ := os.Open("movies.json")
    defer jsonFile.Close()

    byteValue, _ := ioutil.ReadAll(jsonFile)
    var movies []map[string]interface{}
    json.Unmarshal(byteValue, &movies)

    _, err := client.Index("movies").AddDocuments(movies)
    if err != nil {
        panic(err)
    }
  }

  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-go/)
getting_started_search_md: |-
  ```go
  resp, err := client.Index("movies").Search("botman", &meilisearch.SearchRequest{})
  if err != nil {
      panic(err)
  }
  ```

  [About this SDK](https://github.com/meilisearch/meilisearch-go/)
faceted_search_update_settings_1: |-
  resp, err := client.Index("movies").UpdateFilterableAttributes(&[]string{
    "director",
    "genres",
  })
faceted_search_filter_1: |-
  resp, err := client.Index("movies").Search("thriller", &meilisearch.SearchRequest{
    Filter: [][]string{
      []string{"genres = Horror", "genres = Mystery"},
      []string{"director = \"Jordan Peele\""},
    },
  })
faceted_search_facets_distribution_1: |-
  resp, err := client.Index("movies").Search("Batman", &meilisearch.SearchRequest{
    FacetsDistribution: []string{
      "genres",
    },
  })
faceted_search_walkthrough_filterable_attributes_1: |-
  resp, err := client.Index("movies").UpdateFilterableAttributes(&[]string{
    "director",
    "producer",
    "genres",
    "production_companies",
  })
faceted_search_walkthrough_filter_1: |-
  resp, err := client.Index("movies").Search("thriller", &meilisearch.SearchRequest{
    Filter: [][]string{
      []string{"genres = Horror", "genres = Mystery"},
      []string{"director = \"Jordan Peele\""},
    },
  })
faceted_search_walkthrough_facets_distribution_1: |-
  resp, err := client.Index("movies").Search("Batman", &meilisearch.SearchRequest{
    FacetsDistribution: []string{
      "genres",
    },
  })
post_dump_1: |-
  resp, err := client.CreateDump()
get_dump_status_1: |-
  resp, err := client.GetDumpStatus("dump-uid")
phrase_search_1: |-
  resp, err := client.Index("movies").Search("\"african american\" horror", &meilisearch.SearchRequest{})
